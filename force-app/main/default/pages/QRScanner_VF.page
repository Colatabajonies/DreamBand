<apex:page showHeader="false" standardStylesheets="false" sidebar="false" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
        <head>
            <meta charset="utf-8" />
            <meta http-equiv="x-ua-compatible" content="ie=edge" />
            <title>QR Code Scanner</title>
            <apex:slds />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <apex:includeScript value="{!$Resource.qrscanner + '/qr-scanner.umd.min.js'}" />
        </head>
        <body style="margin-top:0;">
            <div id="video-container" class="example-style-1">
                <video id="qr-video" onclick="showHideCams()" style="max-width:100%;max-height:100%;border-radius:20px;border-style:solid;border-width:3px;border-color:#479FDA"></video>
            </div>
            <div class="slds-scope">
                <div style="display:none;">
                    Last Result: <span id="cam-qr-result">None</span>
                </div>                    
                <div id="camlist-container" class="slds-form-element hide">
                    <select id="cam-list" class="slds-select">
                        <option value="environment" selected="true">Default Camera</option>
                    </select>
                </div> 
            </div>
            
            
            <script type="text/javascript">
            const videoElem = document.getElementById('qr-video');
            const camQrResult = document.getElementById('cam-qr-result');
            const camList = document.getElementById('cam-list');
            const camListContainer = document.getElementById('camlist-container');
            var scanlastResult = '';
            
            function showHideCams()
            {
                camListContainer.classList.toggle("hide");
            }
            
            function setResult(label, result) {
                console.log(result.data);
                
                if (scanlastResult != result.data)
                {
                    scanlastResult = result.data;
                    window.parent.postMessage({ name: 'qrcodescan', payload: scanlastResult}, '*');
                }
                
                label.textContent = result.data;
                label.style.color = 'teal';
                clearTimeout(label.highlightTimeout);
                label.highlightTimeout = setTimeout(() => {label.style.color = 'inherit'; scanlastResult = '';}, 3000);
            }
            
            const qrScanner = new QrScanner(videoElem,  result => setResult(camQrResult, result), {
                onDecodeError: error => {
                    //camQrResult.textContent = error;
                    //camQrResult.style.color = 'inherit';
                },
                highlightScanRegion: true,
                highlightCodeOutline: true,
            });
            
            qrScanner.start().then(() => {
                // List cameras after the scanner started to avoid listCamera's stream and the scanner's stream being requested
                // at the same time which can result in listCamera's unconstrained stream also being offered to the scanner.
                // Note that we can also start the scanner after listCameras, we just have it this way around in the demo to
                // start the scanner earlier.
                QrScanner.listCameras(true).then(cameras => cameras.forEach(camera => {
                const option = document.createElement('option');
                option.value = camera.id;
                option.text = camera.label;
                camList.add(option);
                
                /*alert('hasflash:' + qrScanner.hasFlash() + 'flash on:' + qrScanner.isFlashOn());
                if(qrScanner.hasFlash() && !qrScanner.isFlashOn())
                {
                	qrScanner.turnFlashOn();
            	}*/
                
            }));
            });
                
                camList.addEventListener('change', event => {
                showHideCams()
                /*if(qrScanner.isFlashOn())
                {
                	qrScanner.turnFlashOff();
            	}*/
                qrScanner.setCamera(event.target.value);
                /*if(!qrScanner.isFlashOn())
                {
                	qrScanner.turnFlashOn();
            	}*/
            });
                
                </script>
            <style>
                #video-container.example-style-1 .scan-region-highlight-svg,
                #video-container.example-style-1 .code-outline-highlight {
                stroke: #479FDA !important;
                }
                
                .hide {display: none;}
            </style>
        </body>
    </html>
</apex:page>